/* eslint-disable max-lines */
// This file is auto-generated by @hey-api/openapi-ts

import {
	createClient,
	createConfig,
	type Options,
} from "@hey-api/client-fetch";
import type {
	AppInformationError,
	AppInformationResponse,
	AttachmentParamsData,
	AttachmentParamsError,
	AttachmentParamsResponse,
	DeleteMessagesParamsData,
	DeleteMessagesParamsError,
	DeleteMessagesParamsResponse,
	DeleteSearchParamsData,
	DeleteSearchParamsError,
	DeleteSearchParamsResponse,
	DeleteTagParamsData,
	DeleteTagParamsError,
	DeleteTagParamsResponse,
	DownloadRawParamsData,
	DownloadRawParamsError,
	DownloadRawParamsResponse,
	GetAllTagsError,
	GetAllTagsResponse,
	GetHeadersParamsData,
	GetHeadersParamsError,
	GetHeadersParamsResponse,
	GetMessageHtmlParamsData,
	GetMessageHtmlParamsError,
	GetMessageHtmlParamsResponse,
	GetMessageParamsData,
	GetMessageParamsError,
	GetMessageParamsResponse,
	GetMessagesParamsData,
	GetMessagesParamsError,
	GetMessagesParamsResponse,
	GetMessageTextParamsData,
	GetMessageTextParamsError,
	GetMessageTextParamsResponse,
	HtmlCheckParamsData,
	HtmlCheckParamsError,
	HtmlCheckParamsResponse,
	LinkCheckParamsData,
	LinkCheckParamsError,
	LinkCheckParamsResponse,
	ReleaseMessageParamsData,
	ReleaseMessageParamsError,
	ReleaseMessageParamsResponse,
	RenameTagParamsData,
	RenameTagParamsError,
	RenameTagParamsResponse,
	SearchParamsData,
	SearchParamsError,
	SearchParamsResponse,
	SendMessageParamsData,
	SendMessageParamsError,
	SendMessageParamsResponse,
	SetReadStatusParamsData,
	SetReadStatusParamsError,
	SetReadStatusParamsResponse,
	SetTagsParamsData,
	SetTagsParamsError,
	SetTagsParamsResponse,
	SpamAssassinCheckParamsData,
	SpamAssassinCheckParamsError,
	SpamAssassinCheckParamsResponse,
	ThumbnailParamsData,
	ThumbnailParamsError,
	ThumbnailParamsResponse,
	WebUiConfigurationError,
	WebUiConfigurationResponse,
} from "./types.gen.js";

export const client = createClient(createConfig());

/**
 * Get application information
 * Returns basic runtime information, message totals and latest release version.
 */
export const appInformation = <ThrowOnError extends boolean = false>(
	options?: Options<unknown, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AppInformationResponse,
		AppInformationError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/info",
	});
};

/**
 * Get message summary
 * Returns the summary of a message, marking the message as read.
 *
 * The ID can be set to `latest` to return the latest message.
 */
export const getMessageParams = <ThrowOnError extends boolean = false>(
	options: Options<GetMessageParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetMessageParamsResponse,
		GetMessageParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/message/{ID}",
	});
};

/**
 * Get message headers
 * Returns the message headers as an array. Note that header keys are returned alphabetically.
 *
 * The ID can be set to `latest` to return the latest message headers.
 */
export const getHeadersParams = <ThrowOnError extends boolean = false>(
	options: Options<GetHeadersParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetHeadersParamsResponse,
		GetHeadersParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/message/{ID}/headers",
	});
};

/**
 * HTML check
 * Returns the summary of the message HTML checker.
 *
 * The ID can be set to `latest` to return the latest message.
 */
export const htmlCheckParams = <ThrowOnError extends boolean = false>(
	options: Options<HtmlCheckParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		HtmlCheckParamsResponse,
		HtmlCheckParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/message/{ID}/html-check",
	});
};

/**
 * Link check
 * Returns the summary of the message Link checker.
 *
 * The ID can be set to `latest` to return the latest message.
 */
export const linkCheckParams = <ThrowOnError extends boolean = false>(
	options: Options<LinkCheckParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		LinkCheckParamsResponse,
		LinkCheckParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/message/{ID}/link-check",
	});
};

/**
 * Get message attachment
 * This will return the attachment part using the appropriate Content-Type.
 *
 * The ID can be set to `latest` to reference the latest message.
 */
export const attachmentParams = <ThrowOnError extends boolean = false>(
	options: Options<AttachmentParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		AttachmentParamsResponse,
		AttachmentParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/message/{ID}/part/{PartID}",
	});
};

/**
 * Get an attachment image thumbnail
 * This will return a cropped 180x120 JPEG thumbnail of an image attachment.
 * If the image is smaller than 180x120 then the image is padded. If the attachment is not an image then a blank image is returned.
 *
 * The ID can be set to `latest` to return the latest message.
 */
export const thumbnailParams = <ThrowOnError extends boolean = false>(
	options: Options<ThumbnailParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		ThumbnailParamsResponse,
		ThumbnailParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/message/{ID}/part/{PartID}/thumb",
	});
};

/**
 * Get message source
 * Returns the full email source as plain text.
 *
 * The ID can be set to `latest` to return the latest message source.
 */
export const downloadRawParams = <ThrowOnError extends boolean = false>(
	options: Options<DownloadRawParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		DownloadRawParamsResponse,
		DownloadRawParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/message/{ID}/raw",
	});
};

/**
 * Release message
 * Release a message via a pre-configured external SMTP server. This is only enabled if message relaying has been configured.
 *
 * The ID can be set to `latest` to reference the latest message.
 */
export const releaseMessageParams = <ThrowOnError extends boolean = false>(
	options: Options<ReleaseMessageParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		ReleaseMessageParamsResponse,
		ReleaseMessageParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/message/{ID}/release",
	});
};

/**
 * SpamAssassin check
 * Returns the SpamAssassin summary (if enabled) of the message.
 *
 * The ID can be set to `latest` to return the latest message.
 */
export const spamAssassinCheckParams = <ThrowOnError extends boolean = false>(
	options: Options<SpamAssassinCheckParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		SpamAssassinCheckParamsResponse,
		SpamAssassinCheckParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/message/{ID}/sa-check",
	});
};

/**
 * List messages
 * Returns messages from the mailbox ordered from newest to oldest.
 */
export const getMessagesParams = <ThrowOnError extends boolean = false>(
	options?: Options<GetMessagesParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetMessagesParamsResponse,
		GetMessagesParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/messages",
	});
};

/**
 * Set read status
 * If no IDs are provided then all messages are updated.
 */
export const setReadStatusParams = <ThrowOnError extends boolean = false>(
	options?: Options<SetReadStatusParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		SetReadStatusParamsResponse,
		SetReadStatusParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/messages",
	});
};

/**
 * Delete messages
 * Delete individual or all messages. If no IDs are provided then all messages are deleted.
 */
export const deleteMessagesParams = <ThrowOnError extends boolean = false>(
	options?: Options<DeleteMessagesParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteMessagesParamsResponse,
		DeleteMessagesParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/messages",
	});
};

/**
 * Search messages
 * Returns messages matching [a search](https://mailpit.axllent.org/docs/usage/search-filters/), sorted by received date (descending).
 */
export const searchParams = <ThrowOnError extends boolean = false>(
	options: Options<SearchParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		SearchParamsResponse,
		SearchParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/search",
	});
};

/**
 * Delete messages by search
 * Delete all messages matching [a search](https://mailpit.axllent.org/docs/usage/search-filters/).
 */
export const deleteSearchParams = <ThrowOnError extends boolean = false>(
	options: Options<DeleteSearchParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteSearchParamsResponse,
		DeleteSearchParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/search",
	});
};

/**
 * Send a message
 * Send a message via the HTTP API.
 */
export const sendMessageParams = <ThrowOnError extends boolean = false>(
	options?: Options<SendMessageParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).post<
		SendMessageParamsResponse,
		SendMessageParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/send",
	});
};

/**
 * Get all current tags
 * Returns a JSON array of all unique message tags.
 */
export const getAllTags = <ThrowOnError extends boolean = false>(
	options?: Options<unknown, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetAllTagsResponse,
		GetAllTagsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/tags",
	});
};

/**
 * Set message tags
 * This will overwrite any existing tags for selected message database IDs. To remove all tags from a message, pass an empty tags array.
 */
export const setTagsParams = <ThrowOnError extends boolean = false>(
	options?: Options<SetTagsParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		SetTagsParamsResponse,
		SetTagsParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/tags",
	});
};

/**
 * Rename a tag
 * Renames an existing tag.
 */
export const renameTagParams = <ThrowOnError extends boolean = false>(
	options: Options<RenameTagParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).put<
		RenameTagParamsResponse,
		RenameTagParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/tags/{Tag}",
	});
};

/**
 * Delete a tag
 * Deletes a tag. This will not delete any messages with the tag, but will remove the tag from any messages containing the tag.
 */
export const deleteTagParams = <ThrowOnError extends boolean = false>(
	options: Options<DeleteTagParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).delete<
		DeleteTagParamsResponse,
		DeleteTagParamsError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/tags/{Tag}",
	});
};

/**
 * Get web UI configuration
 * Returns configuration settings for the web UI.
 * Intended for web UI only!
 */
export const webUiConfiguration = <ThrowOnError extends boolean = false>(
	options?: Options<unknown, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		WebUiConfigurationResponse,
		WebUiConfigurationError,
		ThrowOnError
	>({
		...options,
		url: "/api/v1/webui",
	});
};

/**
 * Render message HTML part
 * Renders just the message's HTML part which can be used for UI integration testing.
 * Attached inline images are modified to link to the API provided they exist.
 * Note that is the message does not contain a HTML part then an 404 error is returned.
 *
 * The ID can be set to `latest` to return the latest message.
 */
export const getMessageHtmlParams = <ThrowOnError extends boolean = false>(
	options: Options<GetMessageHtmlParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetMessageHtmlParamsResponse,
		GetMessageHtmlParamsError,
		ThrowOnError
	>({
		...options,
		url: "/view/{ID}.html",
	});
};

/**
 * Render message text part
 * Renders just the message's text part which can be used for UI integration testing.
 *
 * The ID can be set to `latest` to return the latest message.
 */
export const getMessageTextParams = <ThrowOnError extends boolean = false>(
	options: Options<GetMessageTextParamsData, ThrowOnError>,
) => {
	return (options?.client ?? client).get<
		GetMessageTextParamsResponse,
		GetMessageTextParamsError,
		ThrowOnError
	>({
		...options,
		url: "/view/{ID}.txt",
	});
};
