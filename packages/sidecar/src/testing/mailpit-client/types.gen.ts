/* eslint-disable max-lines */
// This file is auto-generated by @hey-api/openapi-ts

/**
 * An address such as "Barry Gibbs <bg@example.com>" is represented
 * as Address{Name: "Barry Gibbs", Address: "bg@example.com"}.
 */
export type Address = {
	Address?: string;
	Name?: string;
};

/**
 * AppInformation struct
 */
export type AppInformation = {
	/**
	 * Database path
	 */
	Database?: string;
	/**
	 * Database size in bytes
	 */
	DatabaseSize?: number;
	/**
	 * Latest Mailpit version
	 */
	LatestVersion?: string;
	/**
	 * Total number of messages in the database
	 */
	Messages?: number;
	/**
	 * Runtime statistics
	 */
	RuntimeStats?: {
		/**
		 * Current memory usage in bytes
		 */
		Memory?: number;
		/**
		 * Database runtime messages deleted
		 */
		MessagesDeleted?: number;
		/**
		 * Accepted runtime SMTP messages
		 */
		SMTPAccepted?: number;
		/**
		 * Total runtime accepted messages size in bytes
		 */
		SMTPAcceptedSize?: number;
		/**
		 * Ignored runtime SMTP messages (when using --ignore-duplicate-ids)
		 */
		SMTPIgnored?: number;
		/**
		 * Rejected runtime SMTP messages
		 */
		SMTPRejected?: number;
		/**
		 * Mailpit server uptime in seconds
		 */
		Uptime?: number;
	};
	/**
	 * Tags and message totals per tag
	 */
	Tags?: {
		[key: string]: number;
	};
	/**
	 * Total number of messages in the database
	 */
	Unread?: number;
	/**
	 * Current Mailpit version
	 */
	Version?: string;
};

/**
 * Attachment struct for inline and attachments
 */
export type Attachment = {
	/**
	 * Content ID
	 */
	ContentID?: string;
	/**
	 * Content type
	 */
	ContentType?: string;
	/**
	 * File name
	 */
	FileName?: string;
	/**
	 * Attachment part ID
	 */
	PartID?: string;
	/**
	 * Size in bytes
	 */
	Size?: number;
};

/**
 * Response represents the HTML check response struct
 */
export type HTMLCheckResponse = {
	/**
	 * All platforms tested, mainly for the web UI
	 */
	Platforms?: {
		[key: string]: Array<string>;
	};
	Total?: HTMLCheckTotal;
	/**
	 * List of warnings from tests
	 */
	Warnings?: Array<HTMLCheckWarning>;
};

/**
 * Result struct
 */
export type HTMLCheckResult = {
	/**
	 * Family eg: Outlook, Mozilla Thunderbird
	 */
	Family?: string;
	/**
	 * Friendly name of result, combining family, platform & version
	 */
	Name?: string;
	/**
	 * Note number for partially supported if applicable
	 */
	NoteNumber?: string;
	/**
	 * Platform eg: ios, android, windows
	 */
	Platform?: string;
	/**
	 * Support [yes, no, partial]
	 */
	Support?: string;
	/**
	 * Family version eg: 4.7.1, 2019-10, 10.3
	 */
	Version?: string;
};

/**
 * Score struct
 */
export type HTMLCheckScore = {
	/**
	 * Number of matches in the document
	 */
	Found?: number;
	/**
	 * Total percentage partially supported
	 */
	Partial?: number;
	/**
	 * Total percentage supported
	 */
	Supported?: number;
	/**
	 * Total percentage unsupported
	 */
	Unsupported?: number;
};

/**
 * Total weighted result for all scores
 */
export type HTMLCheckTotal = {
	/**
	 * Total number of HTML nodes detected in message
	 */
	Nodes?: number;
	/**
	 * Overall percentage partially supported
	 */
	Partial?: number;
	/**
	 * Overall percentage supported
	 */
	Supported?: number;
	/**
	 * Total number of tests done
	 */
	Tests?: number;
	/**
	 * Overall percentage unsupported
	 */
	Unsupported?: number;
};

/**
 * Warning represents a failed test
 */
export type HTMLCheckWarning = {
	/**
	 * Category [css, html]
	 */
	Category?: string;
	/**
	 * Description
	 */
	Description?: string;
	/**
	 * Keywords
	 */
	Keywords?: string;
	/**
	 * Notes based on results
	 */
	NotesByNumber?: {
		[key: string]: string;
	};
	/**
	 * Test results
	 */
	Results?: Array<HTMLCheckResult>;
	Score?: HTMLCheckScore;
	/**
	 * Slug identifier
	 */
	Slug?: string;
	/**
	 * Tags
	 */
	Tags?: Array<string>;
	/**
	 * Friendly title
	 */
	Title?: string;
	/**
	 * URL to caniemail.com
	 */
	URL?: string;
};

/**
 * JSONErrorMessage struct
 */
export type JSONErrorMessage = {
	/**
	 * Error message
	 */
	Error?: string;
};

/**
 * Link struct
 */
export type Link = {
	/**
	 * HTTP status definition
	 */
	Status?: string;
	/**
	 * HTTP status code
	 */
	StatusCode?: number;
	/**
	 * Link URL
	 */
	URL?: string;
};

/**
 * Response represents the Link check response
 */
export type LinkCheckResponse = {
	/**
	 * Total number of errors
	 */
	Errors?: number;
	/**
	 * Tested links
	 */
	Links?: Array<Link>;
};

/**
 * Message data excluding physical attachments
 */
export type Message = {
	/**
	 * Message attachments
	 */
	Attachments?: Array<Attachment>;
	/**
	 * Bcc addresses
	 */
	Bcc?: Array<Address>;
	/**
	 * Cc addresses
	 */
	Cc?: Array<Address>;
	/**
	 * Message date if set, else date received
	 */
	Date?: string;
	From?: Address;
	/**
	 * Message body HTML
	 */
	HTML?: string;
	/**
	 * Database ID
	 */
	ID?: string;
	/**
	 * Inline message attachments
	 */
	Inline?: Array<Attachment>;
	/**
	 * Message ID
	 */
	MessageID?: string;
	/**
	 * ReplyTo addresses
	 */
	ReplyTo?: Array<Address>;
	/**
	 * Return-Path
	 */
	ReturnPath?: string;
	/**
	 * Message size in bytes
	 */
	Size?: number;
	/**
	 * Message subject
	 */
	Subject?: string;
	/**
	 * Message tags
	 */
	Tags?: Array<string>;
	/**
	 * Message body text
	 */
	Text?: string;
	/**
	 * To addresses
	 */
	To?: Array<Address>;
};

/**
 * Message headers
 */
export type MessageHeadersResponse = {
	[key: string]: Array<string>;
};

/**
 * MessagesSummary is a summary of a list of messages
 */
export type MessagesSummary = {
	/**
	 * Messages summary
	 * in: body
	 */
	messages?: Array<MessageSummary>;
	/**
	 * Total number of messages matching current query
	 */
	messages_count?: number;
	/**
	 * Pagination offset
	 */
	start?: number;
	/**
	 * All current tags
	 */
	tags?: Array<string>;
	/**
	 * Total number of messages in mailbox
	 */
	total?: number;
	/**
	 * Total number of unread messages in mailbox
	 */
	unread?: number;
};

/**
 * MessageSummary struct for frontend messages
 */
export type MessageSummary = {
	/**
	 * Whether the message has any attachments
	 */
	Attachments?: number;
	/**
	 * Bcc addresses
	 */
	Bcc?: Array<Address>;
	/**
	 * Cc addresses
	 */
	Cc?: Array<Address>;
	/**
	 * Created time
	 */
	Created?: string;
	From?: Address;
	/**
	 * Database ID
	 */
	ID?: string;
	/**
	 * Message ID
	 */
	MessageID?: string;
	/**
	 * Read status
	 */
	Read?: boolean;
	/**
	 * Reply-To address
	 */
	ReplyTo?: Array<Address>;
	/**
	 * Message size in bytes (total)
	 */
	Size?: number;
	/**
	 * Message snippet includes up to 250 characters
	 */
	Snippet?: string;
	/**
	 * Email subject
	 */
	Subject?: string;
	/**
	 * Message tags
	 */
	Tags?: Array<string>;
	/**
	 * To address
	 */
	To?: Array<Address>;
};

/**
 * Rule struct
 */
export type Rule = {
	/**
	 * SpamAssassin rule description
	 */
	Description?: string;
	/**
	 * SpamAssassin rule name
	 */
	Name?: string;
	/**
	 * Spam rule score
	 */
	Score?: number;
};

/**
 * SendMessageConfirmation struct
 */
export type SendMessageConfirmation = {
	/**
	 * Database ID
	 */
	ID?: string;
};

/**
 * SendRequest to send a message via HTTP
 */
export type SendRequest = {
	/**
	 * Attachments
	 */
	Attachments?: Array<{
		/**
		 * Base64-encoded string of the file content
		 */
		Content: string;
		/**
		 * Filename
		 */
		Filename: string;
	}>;
	/**
	 * Bcc recipients email addresses only
	 */
	Bcc?: Array<string>;
	/**
	 * Cc recipients
	 */
	Cc?: Array<{
		/**
		 * Email address
		 */
		Email: string;
		/**
		 * Optional name
		 */
		Name?: string;
	}>;
	/**
	 * "From" recipient
	 */
	From: {
		/**
		 * Email address
		 */
		Email: string;
		/**
		 * Optional name
		 */
		Name?: string;
	};
	/**
	 * Message body (HTML)
	 */
	HTML?: string;
	/**
	 * Optional headers in {"key":"value"} format
	 */
	Headers?: {
		[key: string]: string;
	};
	/**
	 * Optional Reply-To recipients
	 */
	ReplyTo?: Array<{
		/**
		 * Email address
		 */
		Email: string;
		/**
		 * Optional name
		 */
		Name?: string;
	}>;
	/**
	 * Subject
	 */
	Subject?: string;
	/**
	 * Mailpit tags
	 */
	Tags?: Array<string>;
	/**
	 * Message body (text)
	 */
	Text?: string;
	/**
	 * "To" recipients
	 */
	To?: Array<{
		/**
		 * Email address
		 */
		Email: string;
		/**
		 * Optional name
		 */
		Name?: string;
	}>;
};

/**
 * Result is a SpamAssassin result
 */
export type SpamAssassinResponse = {
	/**
	 * If populated will return an error string
	 */
	Error?: string;
	/**
	 * Whether the message is spam or not
	 */
	IsSpam?: boolean;
	/**
	 * Spam rules triggered
	 */
	Rules?: Array<Rule>;
	/**
	 * Total spam score based on triggered rules
	 */
	Score?: number;
};

/**
 * Response includes global web UI settings
 */
export type WebUIConfiguration = {
	/**
	 * Whether messages with duplicate IDs are ignored
	 */
	DuplicatesIgnored?: boolean;
	/**
	 * Optional label to identify this Mailpit instance
	 */
	Label?: string;
	/**
	 * Message Relay information
	 */
	MessageRelay?: {
		/**
		 * Only allow relaying to these recipients (regex)
		 */
		AllowedRecipients?: string;
		/**
		 * Block relaying to these recipients (regex)
		 */
		BlockedRecipients?: string;
		/**
		 * Whether message relaying (release) is enabled
		 */
		Enabled?: boolean;
		/**
		 * Enforced Return-Path (if set) for relay bounces
		 */
		ReturnPath?: string;
		/**
		 * The configured SMTP server address
		 */
		SMTPServer?: string;
	};
	/**
	 * Whether SpamAssassin is enabled
	 */
	SpamAssassin?: boolean;
};

export type AppInformationResponse = AppInformation;

export type AppInformationError = string;

export type GetMessageParamsData = {
	path: {
		/**
		 * Message database ID or "latest"
		 */
		ID: string;
	};
};

export type GetMessageParamsResponse = Message;

export type GetMessageParamsError = string;

export type GetHeadersParamsData = {
	path: {
		/**
		 * Message database ID or "latest"
		 */
		ID: string;
	};
};

export type GetHeadersParamsResponse = MessageHeadersResponse;

export type GetHeadersParamsError = string;

export type HtmlCheckParamsData = {
	path: {
		/**
		 * Message database ID or "latest"
		 */
		ID: string;
	};
};

export type HtmlCheckParamsResponse = HTMLCheckResponse;

export type HtmlCheckParamsError = string;

export type LinkCheckParamsData = {
	path: {
		/**
		 * Message database ID or "latest"
		 */
		ID: string;
	};
	query?: {
		/**
		 * Follow redirects
		 */
		follow?: string;
	};
};

export type LinkCheckParamsResponse = LinkCheckResponse;

export type LinkCheckParamsError = string;

export type AttachmentParamsData = {
	path: {
		/**
		 * Message database ID or "latest"
		 */
		ID: string;
		/**
		 * Attachment part ID
		 */
		PartID: string;
	};
};

export type AttachmentParamsResponse = string;

export type AttachmentParamsError = string;

export type ThumbnailParamsData = {
	path: {
		/**
		 * Message database ID or "latest"
		 */
		ID: string;
		/**
		 * Attachment part ID
		 */
		PartID: string;
	};
};

export type ThumbnailParamsResponse = string;

export type ThumbnailParamsError = string;

export type DownloadRawParamsData = {
	path: {
		/**
		 * Message database ID or "latest"
		 */
		ID: string;
	};
};

export type DownloadRawParamsResponse = string;

export type DownloadRawParamsError = string;

export type ReleaseMessageParamsData = {
	body?: {
		/**
		 * Array of email addresses to relay the message to
		 */
		To: Array<string>;
	};
	path: {
		/**
		 * Message database ID
		 */
		ID: string;
	};
};

export type ReleaseMessageParamsResponse = string;

export type ReleaseMessageParamsError = string;

export type SpamAssassinCheckParamsData = {
	path: {
		/**
		 * Message database ID or "latest"
		 */
		ID: string;
	};
};

export type SpamAssassinCheckParamsResponse = SpamAssassinResponse;

export type SpamAssassinCheckParamsError = string;

export type GetMessagesParamsData = {
	query?: {
		/**
		 * Limit number of results
		 */
		limit?: number;
		/**
		 * Pagination offset
		 */
		start?: number;
	};
};

export type GetMessagesParamsResponse = MessagesSummary;

export type GetMessagesParamsError = string;

export type SetReadStatusParamsData = {
	body?: {
		/**
		 * Array of message database IDs
		 */
		IDs?: Array<string>;
		/**
		 * Read status
		 */
		Read?: boolean;
	};
};

export type SetReadStatusParamsResponse = string;

export type SetReadStatusParamsError = string;

export type DeleteMessagesParamsData = {
	/**
	 * Delete request
	 */
	body?: {
		/**
		 * Array of message database IDs
		 */
		IDs?: Array<string>;
	};
};

export type DeleteMessagesParamsResponse = string;

export type DeleteMessagesParamsError = string;

export type SearchParamsData = {
	query: {
		/**
		 * Limit results
		 */
		limit?: string;
		/**
		 * Search query
		 */
		query: string;
		/**
		 * Pagination offset
		 */
		start?: string;
		/**
		 * [Timezone identifier](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) used only for `before:` & `after:` searches (eg: "Pacific/Auckland").
		 */
		tz?: string;
	};
};

export type SearchParamsResponse = MessagesSummary;

export type SearchParamsError = string;

export type DeleteSearchParamsData = {
	query: {
		/**
		 * Search query
		 */
		query: string;
		/**
		 * [Timezone identifier](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) used only for `before:` & `after:` searches (eg: "Pacific/Auckland").
		 */
		tz?: string;
	};
};

export type DeleteSearchParamsResponse = string;

export type DeleteSearchParamsError = string;

export type SendMessageParamsData = {
	body?: SendRequest;
};

export type SendMessageParamsResponse = SendMessageConfirmation;

export type SendMessageParamsError = JSONErrorMessage;

export type GetAllTagsResponse = Array<string>;

export type GetAllTagsError = string;

export type SetTagsParamsData = {
	body?: {
		/**
		 * Array of message database IDs
		 */
		IDs: Array<string>;
		/**
		 * Array of tag names to set
		 */
		Tags: Array<string>;
	};
};

export type SetTagsParamsResponse = string;

export type SetTagsParamsError = string;

export type RenameTagParamsData = {
	body?: {
		/**
		 * New name
		 */
		Name: string;
	};
	path: {
		/**
		 * The url-encoded tag name to rename
		 */
		Tag: string;
	};
};

export type RenameTagParamsResponse = string;

export type RenameTagParamsError = string;

export type DeleteTagParamsData = {
	path: {
		/**
		 * The url-encoded tag name to delete
		 */
		Tag: string;
	};
};

export type DeleteTagParamsResponse = string;

export type DeleteTagParamsError = string;

export type WebUiConfigurationResponse = WebUIConfiguration;

export type WebUiConfigurationError = string;

export type GetMessageHtmlParamsData = {
	path: {
		/**
		 * Message database ID or "latest"
		 */
		ID: string;
	};
};

export type GetMessageHtmlParamsResponse = string;

export type GetMessageHtmlParamsError = string;

export type GetMessageTextParamsData = {
	path: {
		/**
		 * Message database ID or "latest"
		 */
		ID: string;
	};
};

export type GetMessageTextParamsResponse = string;

export type GetMessageTextParamsError = string;
